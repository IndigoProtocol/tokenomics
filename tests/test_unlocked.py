from datetime import datetime
from typing import Final

import pytest

from tokenomics import unlocked
from tokenomics.vesting_schedule import MAP

GD_DELAY: Final[int] = 0
LAUNCH: Final[datetime] = datetime.strptime("2022-08-18", "%Y-%m-%d")
LD_DELAY: Final[int] = 18
SD_DELAY: Final[int] = 6


@pytest.mark.parametrize(
    "date,expected_supply",
    [
        ("2021-08-20", 0),
        ("2022-08-20", 2398),
        ("2024-09-23", 475922),
        ("2027-08-27", 1750000),
        ("2030-01-01", 1750000),
    ],
)
def test_get_gd_circulating_supply(date: str, expected_supply: int) -> None:
    assert (
        unlocked.per_epoch(
            datetime.strptime(date, "%Y-%m-%d"), GD_DELAY, LAUNCH, MAP.gd
        )
        == expected_supply
    )


@pytest.mark.parametrize(
    "date,expected_supply",
    [
        ("2021-08-20", 0),
        ("2022-08-20", 0),
        ("2022-11-16", 4795),
        ("2023-11-17", 359625),
        ("2024-10-26", 1021324),
        ("2027-11-27", 5250000),
        ("2030-01-01", 5250000),
    ],
)
def test_ld_ve(date: str, expected_supply: int) -> None:
    assert (
        unlocked.per_epoch(
            datetime.strptime(date, "%Y-%m-%d"), LD_DELAY, LAUNCH, MAP.ld
        )
        == expected_supply
    )


@pytest.mark.parametrize(
    "date,expected_supply",
    [
        ("2021-08-20", 0),
        ("2022-08-20", 0),
        ("2022-09-17", 28768),
        ("2022-12-25", 575360),
        ("2027-05-20", 12897265),
        ("2027-09-11", 14000000),
        ("2030-01-01", 14000000),
    ],
)
def test_sd_ve(date: str, expected_supply: int) -> None:
    assert (
        unlocked.per_epoch(
            datetime.strptime(date, "%Y-%m-%d"), SD_DELAY, LAUNCH, MAP.sd
        )
        == expected_supply
    )


@pytest.mark.parametrize(
    "date,expected_supply",
    [
        ("2021-08-17", 0),
        ("2022-08-17", 0),
        ("2022-08-18", 328125),
        ("2022-08-25", 328125),
        ("2022-08-31", 328125),
        ("2022-09-05", 328125),
        ("2022-09-30", 656250),
        ("2023-03-25", 2296875),
        ("2023-04-01", 2625000),
        ("2023-12-02", 5250000),
        ("2024-07-18", 7546875),
        ("2024-07-31", 7875000),
        ("2030-01-01", 7875000),
    ],
)
def test_td_vm(date: str, expected_supply: int) -> None:
    assert (
        unlocked.per_month(datetime.strptime(date, "%Y-%m-%d"), LAUNCH, MAP.td)
        == expected_supply
    )


@pytest.mark.parametrize(
    "date,expected_supply",
    [
        ("2021-08-31", 0),
        ("2022-08-17", 0),
        ("2022-08-18", 1030523),
        ("2022-09-01", 1035319),
        ("2023-09-01", 7443337),
    ],
)
def test_total(date: str, expected_supply: int) -> None:
    assert (
        unlocked.total(
            datetime.strptime(date, "%Y-%m-%d"),
            GD_DELAY,
            MAP.gd,
            LD_DELAY,
            MAP.ld,
            SD_DELAY,
            MAP.sd,
            MAP.td,
            LAUNCH,
            700000,
        )
        == expected_supply
    )


@pytest.mark.parametrize(
    "date,expected_supply",
    [
        ("2022-10-24", 1910319),
        ("2022-11-12", 1948679),
        ("2022-11-16", 1979845),
        ("2023-01-27", 3091599),
        ("2023-03-11", 4071498),
        ("2023-03-14", 4071498),
        ("2023-04-29", 4723272),
        ("2023-06-17", 5739132),
        ("2023-07-05", 6211101),
        ("2023-07-29", 6390906),
        ("2023-07-31", 6390906),
        ("2023-08-04", 6754992),
        ("2023-08-14", 6826914),
        ("2023-08-16", 6826914),
        ("2023-09-24", 7442727),
        ("2023-10-01", 7806813),
        ("2023-10-14", 7915894),
        ("2023-11-01", 8392655),
        ("2023-11-19", 8513720),
        ("2023-11-27", 8597626),
        ("2023-12-17", 9093563),
        ("2023-12-26", 9177469),
        ("2023-12-31", 9547547),
        ("2024-01-16", 9682996),
        ("2024-01-19", 9682996),
        ("2024-02-16", 10291609),
        ("2024-02-25", 10385105),
        ("2024-03-23", 10946970),
        ("2024-03-31", 11040466),
        ("2024-05-10", 12070700),
        ("2024-05-12", 12070700),
        ("2024-06-11", 12679313),
        ("2024-06-18", 12772809),
        ("2024-07-23", 13428170),
        ("2024-08-07", 13896539),
        ("2024-08-30", 14083531),
        ("2024-09-13", 14551898),
        ("2024-09-22", 14645392),
        ("2024-10-24", 15257596),
        ("2024-11-06", 15401432),
        ("2024-11-06", 15401432),
        ("2024-11-13", 15454172),
        ("2024-11-17", 15506912),
        ("2024-11-25", 15612392),
        ("2024-11-28", 15612392),
        ("2024-11-30", 15665132),
        ("2024-12-16", 15823352),
        ("2025-01-20", 16206914),
        ("2025-01-30", 16321982),
        ("2025-03-15", 16839788),
        ("2025-04-05", 17069924),
        ("2025-04-11", 17127458),
        ("2025-05-06", 17415128),
        ("2025-07-04", 18105526),
        ("2025-07-18", 18278125),
        ("2025-07-23", 18335658),
        ("2025-07-30", 18393191),
        ("2025-08-31", 18738389),
        ("2025-09-01", 18795922),
        ("2025-09-20", 18968521),
        ("2025-09-26", 19083587),
        ("2025-10-05", 19141120),
        ("2025-10-06", 19198653),
        ("2025-11-20", 19741623),
        ("2025-12-07", 19932201),
        ("2025-12-08", 19932201),
        ("2025-12-19", 20059253),
        ("2026-03-22", 21338172),
        ("2026-04-12", 21611456),
        ("2026-05-27", 22226345),
        ("2026-06-06", 22362987),
        ("2026-07-22", 22977876),
        ("2026-07-27", 23046197),
        ("2026-08-18", 23387802),
        ("2026-10-01", 24002691),
        ("2026-10-10", 24071012),
        ("2026-11-30", 24859696),
        ("2026-12-16", 25082638),
        ("2027-01-26", 25696326),
        ("2027-01-29", 25775434),
        ("2027-02-02", 25775434),
        ("2027-03-10", 26408298),
        ("2027-03-17", 26487406),
        ("2027-03-18", 26487406),
        ("2027-04-09", 26882946),
        ("2027-04-12", 26882946),
        ("2027-04-12", 26882946),
        ("2027-05-07", 27278486),
        ("2027-05-16", 27436702),
        ("2027-05-20", 27515810),
        ("2027-06-21", 27990458),
        ("2027-06-27", 28069566),
        ("2027-07-05", 28227782),
        ("2027-07-06", 28227782),
        ("2027-07-06", 28227782),
        ("2027-07-12", 28306890),
        ("2027-08-06", 28702430),
        ("2027-08-23", 29018862),
        ("2027-09-07", 29256186),
        ("2027-09-09", 29256186),
    ],
)
def test_total_extended(date: str, expected_supply: int) -> None:
    assert (
        unlocked.total(
            datetime.strptime(date, "%Y-%m-%d"),
            0,
            MAP.gd,
            18,
            MAP.ld,
            6,
            MAP.sd,
            MAP.td,
            datetime(2022, 10, 12),
            1575000,
            offset=19,
        )
        == expected_supply
    )
